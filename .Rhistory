message("getting cached data")
return(imat)
}
data <- x$get()
imat <- solve(data)
x$setInverse(imat)
m
}
cacheSolve(m)
CacheSolve(m)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
makeCacheMatrix <- function( mat = matrix() ) {
inv <- NULL
set <- function( matrix ) {
mat <<- matrix
inv <<- NULL
}
get <- function() {
mat
}
setInverse <- function(inverse) {
inv <<- inverse
}
getInverse <- function() {
inv
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
CacheSolve <- function(x, ...) {
imat <- x$getInverse()
if( !is.null(imat) ) {
message("getting cached data")
return(imat)
}
data <- x$get()
imat <- solve(data)
x$setInverse(imat)
m
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
CacheSolve(m)
CacheSolve(m)
makeCacheMatrix <- function( x = matrix() ) {
m <- NULL
set <- function( matrix ) {
x <<- matrix
m <<- NULL
}
get <- function() {
x
}
setInverse <- function(inverse) {
m <<- inverse
}
getInverse <- function() {
x
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function( x = matrix() ) {
m <- NULL
set <- function( matrix ) {
x <<- matrix
m <<- NULL
}
get <- function() {
x
}
setInverse <- function(inverse) {
m <<- inverse
}
getInverse <- function() {
x
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
cacheSolve <- function(x, ...) {
imat <- x$getInverse()
if( !is.null(imat) ) {
message("getting cached data")
return(imat)
}
data <- x$get()
imat <- solve(data)
x$setInverse(imat)
m
}
cacheSolve(m)
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
x-3
y<-x-3
y
z<-c(1.1,9.3.14)
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
z+1
c(z,555)
c(z,555,z)
z*2+100
my_sqrt<-(z-1)^(1/2)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z*2+100)
(z*2+1000)
(z*2+1000)
(z*2+1000)
inf()
info()
z
(z*2+1000)
(z*2+1000)
(z*2+1000)
(z*2+1000)
(z*2+1000)
(z * 2 +100)
(z * 2 +1000)
(z * 2 +
| 100)
(z * 2 +
| 1000)
(z*2+1000)
info()
skip()
my_div
library(swirl)
swirl()
?sample
sample(1:6, 4, replace=TRUE)
(1/6)^4
sample(1:6, 4, replace=TRUE)
sample(1:20, 4, replace=False)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10, replace=TRUE)
sample(1:20, 10, replace=F)
sample(1:20, 10)
?LETTERS
LETTERS
sample(LETTERS)
flip<-c(0,1)
?sample
flips<-sample(0:1, 100, replace=TRUE, prob=.7)
flips<-sample(0:1, 100, replace=TRUE, prob=.3)
flips<-sample(c(0,1), 100, replace=TRUE, prob=c(.3,.7))
flips
sum(flips)
?rbinom
rbin(1,100, prob=.7)
rbin(1,100, .7)
rbin(1,100, 0.7)
rbinom(1,100, 0.7)
x<-rbinom(1,100, 0.7)
x
flip2<-rbinom(1,100, 0.7)
flip2<-rbinom(1,100, 0.7, n=100)
flip2<-rbinom(1,n=100, size=1, prob=0.7)
flip2<-rbinom(n=100, size=1, prob=0.7)
flip2
flip2<-rbinom(n=100, size=1, prob=0.7)
info()
rbinom(n=100, size=1, prob=0.7)
flip2<-rbinom(n=100, size=1, prob=0.7)
flips2<-rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
?rnorm()
rnorm(10)
rnorm(100, 25)
rnorm(10,100, 25)
rpois(5)
?rpois
rpois(5, mean-10)
rpois(5, mean=10)
rpois(.5, mean=10)
rpois(.5)
rpois(1:5)
rpois(1:5, 1)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois<-replicate(100, rpois(5, 10))
my_pois
colMEan(my_rpois)
colMEan(my_pois)
colMean(my_pois)
colMeans(my_pois)
cm<-colMeans(my_pois)
cm
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time()).
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units ="days")
ls
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, n=10)
head(plants,10)
tail(plants)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(plants, class)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors, 6)
head(flag_colors, 6)
head(flag_colors, 5)
head(flag_colors, n=6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = testing$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain, ]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
ggplot(data = training, aes(x = log(Superplasticizer+1)) + geom_histogram() + theme_bw()
/
)
ggplot(data = training, aes(x = log(Superplasticizer+1))
geom_histogram() + theme_bw()
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
log)
log(0)
log(1)
setwd("~/datasciencecoursera/ExData_Plotting1")
ds<-read.table("household_power_consumption.txt", header=T, sep=";", stringsAsFactors=F)
## Subsetting the data
ds$Date <- as.Date(ds$Date, format="%d/%m/%Y")
data <- subset(ds, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 4
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
names(data)
Datetime<-data$Datetime
Sub_metering_1<-data$Sub_metering_1
Sub_metering_2<-data$Sub_metering_2
Sub_metering_3<-data$Sub_metering_3
Voltage<-data$Voltage
Global_reactive_power<-data$Global_reactive_power
Global_active_power<-data$Global_active_power
Global_intensity<-data$Global_intensity
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Energy sub meeting", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power ",xlab="")
ylab="Voltage", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage", xlab="")
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Energy sub meeting", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power ",xlab="")
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Energy sub meeting", xlab="")
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Energy sub meeting", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power ",xlab="")
## Saving to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
par(mfrow=c(2,2), mar=c(4,4,2,.5), oma=c(0,0,2,0))
names(data)
Datetime<-data$Datetime
Sub_metering_1<-data$Sub_metering_1
Sub_metering_2<-data$Sub_metering_2
Sub_metering_3<-data$Sub_metering_3
Voltage<-data$Voltage
Global_reactive_power<-data$Global_reactive_power
Global_active_power<-data$Global_active_power
Global_intensity<-data$Global_intensity
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Energy sub meeting", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power ",xlab="")
par(mfrow=c(2,2), mar=c(4,4,2,.5), oma=c(0,0,0,0))
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Energy sub meeting", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
legend("topright", col=c("black", "red", "blue"), lty=1, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power ",xlab="")
source('~/datasciencecoursera/ExData_Plotting1/Plot4.R')
mfrow=c(1,1)
dev.copy(png, file="plot1.png", height=480, width=480)
ds<-read.table("household_power_consumption.txt",
header=T, sep=";", stringsAsFactors=F)
## Subsetting the data
ds$Date <- as.Date(ds$Date, format="%d/%m/%Y")
data <- subset(ds, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
## Plot 1
x<-as.numeric(data$Global_active_power)
hist(x, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
## Subsetting the data
ds$Date <- as.Date(ds$Date, format="%d/%m/%Y")
data <- subset(ds, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 2
plot(data$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
## Saving to file
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
ds$Date <- as.Date(ds$Date, format="%d/%m/%Y")
data <- subset(ds, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 3
names(data)
Datetime<-data$Datetime
Sub_metering_1<-data$Sub_metering_1
Sub_metering_2<-data$Sub_metering_2
Sub_metering_3<-data$Sub_metering_3
plot(Sub_metering_1~Datetime, type="l",
ylab="Energy sub meeting", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
##Adding a legend
legend("topright", col=c("black", "red", "blue"), lty=1,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
names(data)
Datetime<-data$Datetime
Sub_metering_1<-data$Sub_metering_1
Sub_metering_2<-data$Sub_metering_2
Sub_metering_3<-data$Sub_metering_3
Voltage<-data$Voltage
Global_reactive_power<-data$Global_reactive_power
Global_active_power<-data$Global_active_power
Global_intensity<-data$Global_intensity
par(mfrow=c(2,2), mar=c(4,4,2,.5), oma=c(0,0,0,0))
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Energy sub meeting", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global_Rective_Power ",xlab="datetime")
## Saving to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
